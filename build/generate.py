#!/bin/python3

import sys
import os
import re

HEADER = """// This file is generated by CMake.
// Do not modify by hand.

#include <string>
#include "pancake/pancake.hpp"

using std::string;

"""

MAIN = """int main() {
    _register();
    return _main();
}
"""

def get_source_files():

    source_files = []
    for root, _, filenames in os.walk("./../src"):
        for filename in filenames:
            search = re.search(r'[(.cpp)(.cxx)(.cc)]$', filename)
            if search == None: continue
            source_files.append(os.path.join(root, filename))

    return source_files

def get_header_files():

    header_files = []
    for root, _, filenames in os.walk("./../include"):
        for filename in filenames:
            search = re.search(r'[(.hpp)(.hxx)(.h)]$', filename)
            if search == None: continue
            header_files.append(os.path.join(root, filename))

    return header_files

def get_components(files):

    components = []
    for file in files:
        
        f = open(file, 'r')
        lines = f.readlines()
        f.close()

        for line in lines:
            
            search = re.search(r'class.*:.*\s*public\s+Component', line)
            if search == None: continue
            
            line = re.sub(r'class\s*', '', line)
            line = re.sub(r'\s*:.*', '', line)
            line = line.strip()
            components.append((line, file))
    
    return components

def get_main(source_files):

    for source_file in source_files:
        
        f = open(source_file, 'r')
        contents = f.read()
        f.close()

        search = re.search(r'int\s+main\s*\(', contents)
        if search == None: continue

        contents = re.sub(r'int\s+main\s*\(', 'int _main(', contents)
        return contents
    
    return None

def main():

    header_files = get_header_files()
    source_files = get_source_files()
    components = get_components(header_files)
    main_contents = get_main(source_files)

    f = open('main.cpp', 'w')
    f.write(HEADER)
    
    if main_contents == None: f.write('int _main() {return 0;}')
    else: f.write(main_contents)
    f.write('\n\n')

    for name, file in components:
        f.write(f'#include "{file}"\n')
    f.write('\n')

    f.write('void _register() {\n')
    for name, file in components:
        f.write(f'\tComponentFactory::add("{name}", {name}::create);\n')

    f.write("}\n\n")
    f.write(MAIN)
    f.close()

if __name__ == '__main__':
    main()